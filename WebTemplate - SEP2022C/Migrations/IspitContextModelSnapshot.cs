// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace WebTemplate.Migrations
{
    [DbContext(typeof(IspitContext))]
    partial class IspitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Biljka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Cvet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("List")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Podrucje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SajtID")
                        .HasColumnType("int");

                    b.Property<string>("Stablo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vidjanja")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SajtID");

                    b.ToTable("Biljke");
                });

            modelBuilder.Entity("Models.NepoznataBiljka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Cvet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("List")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Podrucje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SajtID")
                        .HasColumnType("int");

                    b.Property<string>("Stablo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SajtID");

                    b.ToTable("NepoznateBiljke");
                });

            modelBuilder.Entity("Models.Sajt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sajtovi");
                });

            modelBuilder.Entity("Models.Biljka", b =>
                {
                    b.HasOne("Models.Sajt", "Sajt")
                        .WithMany("Biljke")
                        .HasForeignKey("SajtID");

                    b.Navigation("Sajt");
                });

            modelBuilder.Entity("Models.NepoznataBiljka", b =>
                {
                    b.HasOne("Models.Sajt", "Sajt")
                        .WithMany("NepoznateBiljke")
                        .HasForeignKey("SajtID");

                    b.Navigation("Sajt");
                });

            modelBuilder.Entity("Models.Sajt", b =>
                {
                    b.Navigation("Biljke");

                    b.Navigation("NepoznateBiljke");
                });
#pragma warning restore 612, 618
        }
    }
}
